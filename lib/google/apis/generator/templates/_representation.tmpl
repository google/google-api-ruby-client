<% for child_class in cls.classes %>
class <%= child_class.class_name %>Representation < Google::Apis::Core::JsonRepresentation; end
<% end %>
<% if cls.discriminant %>
def from_hash(hash, *args)
  case hash['<%= cls.discriminant %>']
<% cls.variants.each do | key, type | %>
  when '<%= key %>'
    <%= type.representation_class %>.new(<%= type.name %>.new).from_hash(hash, *args)
<% end %>
  end
end

def to_hash(*args)
  case represented
<% cls.variants.each do | key, type | %>
  when <%= type.name %>
    <%= type.representation_class %>.new(represented).to_hash(*args)
<% end %>
  end
end
<% else %>
<% for property in cls.properties.values %>
<% if property.type.hash? %>
hash :<%= property.name %>, as: '<%= property.original_name %>'<%= include('representation_type', :lead => ', ' , :type => property.type.item_type, :api => api) %>
<% elsif property.type.array? %>
collection :<%= property.name %>, as: '<%= property.original_name %>'<%= include('representation_type', :lead => ', ' , :type => property.type.item_type, :api => api) %>
<% else %>
property :<%= property.name %>, as: '<%= property.original_name %>'<%= include('representation_type', :lead => ', ' , :type => property.type, :api => api) %><% end %>
<% end %>
<% end %>
<% for child_class in cls.classes %>

# @private
class <%= child_class.class_name %>Representation < Google::Apis::Core::JsonRepresentation
<% if api.data_wrap %>
  self.representation_wrap = lambda { |args| :data if args[:unwrap] == <%= child_class.qualified_name %> }
<% end %>
  <%= indent(include('representation', :cls => child_class, :api => api), 2) %>
end
<% end %>
